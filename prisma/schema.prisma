// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model UserPhoto {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fileId    String   @unique
  photoUrl  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  userPhoto     UserPhoto?
  tgId          Int        @unique
  username      String?
  firstName     String?
  lastName      String?
  languageCode  String?
  updatedAt     DateTime   @updatedAt
  createdAt     DateTime   @default(now())
  purchases     Purchase[]
  receivedGifts Purchase[] @relation("Recipient")
}

enum CurrencyAsset {
  TON
  USDT
  ETH
  BTC
  LTC
  BNB
  TRX
  USDC
}

enum FiatAsset {
  USD
  EUR
  RUB
  BYN
  UAH
  GBP
  CNY
  KZT
  UZS
  GEL
  TRY
  AMD
  THB
  INR
  BRL
  IDR
  AZN
  AED
  PLN
  ILS
}

enum CurrencyType {
  crypto
  fiat
}

model Gift {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  price           Int
  currency        CurrencyAsset
  total           Int
  lottie          Json
  backgroundLight String?
  backgroundDark  String?
  purchases       Purchase[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Purchase {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  amount        Int
  currencyType  CurrencyType
  currencyAsset CurrencyAsset?
  currencyFiat  FiatAsset?
  recipientTgId Int?
  status        PurchaseStatus
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @db.ObjectId
  gift          Gift           @relation(fields: [giftId], references: [id])
  giftId        String         @db.ObjectId
  recipient     User?          @relation("Recipient", fields: [recipientId], references: [id])
  recipientId   String?        @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum PurchaseStatus {
  PENDING_PAYMENT
  PAID
}
